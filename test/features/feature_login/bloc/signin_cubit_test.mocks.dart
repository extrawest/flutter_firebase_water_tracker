// Mocks generated by Mockito 5.3.2 from annotations
// in water_tracker_app/test/features/feature_login/bloc/signin_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:firebase_auth/firebase_auth.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:water_tracker_app/features/feature_home/services/firebase_crashlytics_service.dart'
    as _i4;
import 'package:water_tracker_app/features/feature_home/services/firestore_service.dart'
    as _i3;
import 'package:water_tracker_app/features/feature_login/repositories/login_repository.dart'
    as _i6;
import 'package:water_tracker_app/features/feature_login/services/login_service.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLoginService_0 extends _i1.SmartFake implements _i2.LoginService {
  _FakeLoginService_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFirestoreService_1 extends _i1.SmartFake
    implements _i3.FirestoreService {
  _FakeFirestoreService_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFirebaseCrashlyticsService_2 extends _i1.SmartFake
    implements _i4.FirebaseCrashlyticsService {
  _FakeFirebaseCrashlyticsService_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUser_3 extends _i1.SmartFake implements _i5.User {
  _FakeUser_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LoginRepositoryImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginRepositoryImpl extends _i1.Mock
    implements _i6.LoginRepositoryImpl {
  MockLoginRepositoryImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.LoginService get loginService => (super.noSuchMethod(
        Invocation.getter(#loginService),
        returnValue: _FakeLoginService_0(
          this,
          Invocation.getter(#loginService),
        ),
      ) as _i2.LoginService);
  @override
  _i3.FirestoreService get fireStoreService => (super.noSuchMethod(
        Invocation.getter(#fireStoreService),
        returnValue: _FakeFirestoreService_1(
          this,
          Invocation.getter(#fireStoreService),
        ),
      ) as _i3.FirestoreService);
  @override
  _i4.FirebaseCrashlyticsService get firebaseCrashlyticsService =>
      (super.noSuchMethod(
        Invocation.getter(#firebaseCrashlyticsService),
        returnValue: _FakeFirebaseCrashlyticsService_2(
          this,
          Invocation.getter(#firebaseCrashlyticsService),
        ),
      ) as _i4.FirebaseCrashlyticsService);
  @override
  _i7.Future<_i5.User> createUserWithEmailAndPassword({
    required String? name,
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createUserWithEmailAndPassword,
          [],
          {
            #name: name,
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i7.Future<_i5.User>.value(_FakeUser_3(
          this,
          Invocation.method(
            #createUserWithEmailAndPassword,
            [],
            {
              #name: name,
              #email: email,
              #password: password,
            },
          ),
        )),
      ) as _i7.Future<_i5.User>);
  @override
  _i7.Future<_i5.User> signInWithEmailAndPassword({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInWithEmailAndPassword,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i7.Future<_i5.User>.value(_FakeUser_3(
          this,
          Invocation.method(
            #signInWithEmailAndPassword,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
      ) as _i7.Future<_i5.User>);
  @override
  _i7.Future<_i5.User> signInWithGoogle() => (super.noSuchMethod(
        Invocation.method(
          #signInWithGoogle,
          [],
        ),
        returnValue: _i7.Future<_i5.User>.value(_FakeUser_3(
          this,
          Invocation.method(
            #signInWithGoogle,
            [],
          ),
        )),
      ) as _i7.Future<_i5.User>);
  @override
  _i7.Future<_i5.User> loginWithFacebook() => (super.noSuchMethod(
        Invocation.method(
          #loginWithFacebook,
          [],
        ),
        returnValue: _i7.Future<_i5.User>.value(_FakeUser_3(
          this,
          Invocation.method(
            #loginWithFacebook,
            [],
          ),
        )),
      ) as _i7.Future<_i5.User>);
  @override
  _i7.Future<void> recordError(
    String? message,
    StackTrace? stackTrace, {
    dynamic reason,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #recordError,
          [
            message,
            stackTrace,
          ],
          {#reason: reason},
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
}
