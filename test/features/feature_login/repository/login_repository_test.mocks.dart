// Mocks generated by Mockito 5.3.2 from annotations
// in water_tracker_app/test/features/feature_login/repository/login_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:cloud_firestore/cloud_firestore.dart' as _i6;
import 'package:firebase_auth/firebase_auth.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:water_tracker_app/features/feature_home/services/FirebaseCrashlyticsService.dart'
    as _i7;
import 'package:water_tracker_app/features/feature_home/services/firestore_service.dart'
    as _i5;
import 'package:water_tracker_app/features/feature_login/services/login_service.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUser_0 extends _i1.SmartFake implements _i2.User {
  _FakeUser_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LoginService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginService extends _i1.Mock implements _i3.LoginService {
  MockLoginService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.User> createUserWithEmailAndPassword({
    required String? name,
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createUserWithEmailAndPassword,
          [],
          {
            #name: name,
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i4.Future<_i2.User>.value(_FakeUser_0(
          this,
          Invocation.method(
            #createUserWithEmailAndPassword,
            [],
            {
              #name: name,
              #email: email,
              #password: password,
            },
          ),
        )),
      ) as _i4.Future<_i2.User>);
  @override
  _i4.Future<_i2.User> signInWithEmailAndPassword({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInWithEmailAndPassword,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i4.Future<_i2.User>.value(_FakeUser_0(
          this,
          Invocation.method(
            #signInWithEmailAndPassword,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
      ) as _i4.Future<_i2.User>);
  @override
  _i4.Future<_i2.User> signInWithGoogle() => (super.noSuchMethod(
        Invocation.method(
          #signInWithGoogle,
          [],
        ),
        returnValue: _i4.Future<_i2.User>.value(_FakeUser_0(
          this,
          Invocation.method(
            #signInWithGoogle,
            [],
          ),
        )),
      ) as _i4.Future<_i2.User>);
  @override
  _i4.Future<_i2.User> loginWithFacebook() => (super.noSuchMethod(
        Invocation.method(
          #loginWithFacebook,
          [],
        ),
        returnValue: _i4.Future<_i2.User>.value(_FakeUser_0(
          this,
          Invocation.method(
            #loginWithFacebook,
            [],
          ),
        )),
      ) as _i4.Future<_i2.User>);
}

/// A class which mocks [FirestoreService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirestoreService extends _i1.Mock implements _i5.FirestoreService {
  MockFirestoreService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> setData({
    required String? path,
    required Map<String, dynamic>? data,
    bool? merge = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setData,
          [],
          {
            #path: path,
            #data: data,
            #merge: merge,
          },
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<void> setUserDocument({required Map<String, dynamic>? data}) =>
      (super.noSuchMethod(
        Invocation.method(
          #setUserDocument,
          [],
          {#data: data},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Stream<T> documentStream<T>({
    required String? path,
    required T Function(
      _i6.DocumentSnapshot<Map<String, dynamic>>,
      _i6.SnapshotOptions?,
    )?
        fromFirestore,
    required Map<String, Object?> Function(
      dynamic,
      _i6.SetOptions?,
    )?
        toFirestore,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #documentStream,
          [],
          {
            #path: path,
            #fromFirestore: fromFirestore,
            #toFirestore: toFirestore,
          },
        ),
        returnValue: _i4.Stream<T>.empty(),
      ) as _i4.Stream<T>);
}

/// A class which mocks [FirebaseCrashlyticsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseCrashlyticsService extends _i1.Mock
    implements _i7.FirebaseCrashlyticsService {
  MockFirebaseCrashlyticsService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> recordError(
    String? message,
    StackTrace? stackTrace, {
    dynamic reason,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #recordError,
          [
            message,
            stackTrace,
          ],
          {#reason: reason},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
