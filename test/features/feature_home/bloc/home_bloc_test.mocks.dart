// Mocks generated by Mockito 5.3.2 from annotations
// in water_tracker_app/test/features/feature_home/bloc/home_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;

import 'package:firebase_auth/firebase_auth.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:water_tracker_app/features/feature_home/models/drink_model.dart'
    as _i10;
import 'package:water_tracker_app/features/feature_home/models/user_model.dart'
    as _i9;
import 'package:water_tracker_app/features/feature_home/repositories/home_repository.dart'
    as _i7;
import 'package:water_tracker_app/features/feature_home/services/dynamic_links_service.dart'
    as _i5;
import 'package:water_tracker_app/features/feature_home/services/firebase_config_service.dart'
    as _i4;
import 'package:water_tracker_app/features/feature_home/services/firebase_crashlytics_service.dart'
    as _i6;
import 'package:water_tracker_app/features/feature_home/services/firestore_service.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFirebaseAuth_0 extends _i1.SmartFake implements _i2.FirebaseAuth {
  _FakeFirebaseAuth_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFirestoreService_1 extends _i1.SmartFake
    implements _i3.FirestoreService {
  _FakeFirestoreService_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFirebaseConfigService_2 extends _i1.SmartFake
    implements _i4.FirebaseConfigService {
  _FakeFirebaseConfigService_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDynamicLinksService_3 extends _i1.SmartFake
    implements _i5.DynamicLinksService {
  _FakeDynamicLinksService_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFirebaseCrashlyticsService_4 extends _i1.SmartFake
    implements _i6.FirebaseCrashlyticsService {
  _FakeFirebaseCrashlyticsService_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [HomeRepositoryImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeRepositoryImpl extends _i1.Mock
    implements _i7.HomeRepositoryImpl {
  MockHomeRepositoryImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FirebaseAuth get auth => (super.noSuchMethod(
        Invocation.getter(#auth),
        returnValue: _FakeFirebaseAuth_0(
          this,
          Invocation.getter(#auth),
        ),
      ) as _i2.FirebaseAuth);
  @override
  _i3.FirestoreService get firestoreService => (super.noSuchMethod(
        Invocation.getter(#firestoreService),
        returnValue: _FakeFirestoreService_1(
          this,
          Invocation.getter(#firestoreService),
        ),
      ) as _i3.FirestoreService);
  @override
  _i4.FirebaseConfigService get firebaseConfigService => (super.noSuchMethod(
        Invocation.getter(#firebaseConfigService),
        returnValue: _FakeFirebaseConfigService_2(
          this,
          Invocation.getter(#firebaseConfigService),
        ),
      ) as _i4.FirebaseConfigService);
  @override
  _i5.DynamicLinksService get dynamicLinksService => (super.noSuchMethod(
        Invocation.getter(#dynamicLinksService),
        returnValue: _FakeDynamicLinksService_3(
          this,
          Invocation.getter(#dynamicLinksService),
        ),
      ) as _i5.DynamicLinksService);
  @override
  _i6.FirebaseCrashlyticsService get firebaseCrashlyticsService =>
      (super.noSuchMethod(
        Invocation.getter(#firebaseCrashlyticsService),
        returnValue: _FakeFirebaseCrashlyticsService_4(
          this,
          Invocation.getter(#firebaseCrashlyticsService),
        ),
      ) as _i6.FirebaseCrashlyticsService);
  @override
  _i8.Future<String> getProgressIndicatorType() => (super.noSuchMethod(
        Invocation.method(
          #getProgressIndicatorType,
          [],
        ),
        returnValue: _i8.Future<String>.value(''),
      ) as _i8.Future<String>);
  @override
  _i8.Future<bool> addDrink({
    required String? drinkName,
    required int? drinkAmount,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addDrink,
          [],
          {
            #drinkName: drinkName,
            #drinkAmount: drinkAmount,
          },
        ),
        returnValue: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);
  @override
  _i8.Future<void> initDay() => (super.noSuchMethod(
        Invocation.method(
          #initDay,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Stream<_i9.UserModel> userStream() => (super.noSuchMethod(
        Invocation.method(
          #userStream,
          [],
        ),
        returnValue: _i8.Stream<_i9.UserModel>.empty(),
      ) as _i8.Stream<_i9.UserModel>);
  @override
  _i8.Stream<List<_i10.DrinkModel>> drinksStream() => (super.noSuchMethod(
        Invocation.method(
          #drinksStream,
          [],
        ),
        returnValue: _i8.Stream<List<_i10.DrinkModel>>.empty(),
      ) as _i8.Stream<List<_i10.DrinkModel>>);
  @override
  _i8.Future<void> handleDynamicLink(void Function(int)? callback) =>
      (super.noSuchMethod(
        Invocation.method(
          #handleDynamicLink,
          [callback],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> recordError(
    String? message,
    StackTrace? stackTrace, {
    dynamic reason,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #recordError,
          [
            message,
            stackTrace,
          ],
          {#reason: reason},
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  fetchRemoteConfig() {}
}
