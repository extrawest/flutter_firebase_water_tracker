// Mocks generated by Mockito 5.3.2 from annotations
// in water_tracker_app/test/features/feature_home/repositories/home_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:water_tracker_app/features/feature_home/models/drink_model.dart'
    as _i5;
import 'package:water_tracker_app/features/feature_home/models/user_model.dart'
    as _i4;
import 'package:water_tracker_app/features/feature_home/repositories/home_repository.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [HomeRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeRepository extends _i1.Mock implements _i2.HomeRepository {
  MockHomeRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<String> getProgressIndicatorType() => (super.noSuchMethod(
        Invocation.method(
          #getProgressIndicatorType,
          [],
        ),
        returnValue: _i3.Future<String>.value(''),
      ) as _i3.Future<String>);
  @override
  _i3.Future<bool> addDrink({
    required String? drinkName,
    required int? drinkAmount,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addDrink,
          [],
          {
            #drinkName: drinkName,
            #drinkAmount: drinkAmount,
          },
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
  @override
  _i3.Stream<_i4.UserModel> userStream() => (super.noSuchMethod(
        Invocation.method(
          #userStream,
          [],
        ),
        returnValue: _i3.Stream<_i4.UserModel>.empty(),
      ) as _i3.Stream<_i4.UserModel>);
  @override
  _i3.Stream<List<_i5.DrinkModel>> drinksStream() => (super.noSuchMethod(
        Invocation.method(
          #drinksStream,
          [],
        ),
        returnValue: _i3.Stream<List<_i5.DrinkModel>>.empty(),
      ) as _i3.Stream<List<_i5.DrinkModel>>);
  @override
  _i3.Future<void> handleDynamicLink(void Function(int)? callback) =>
      (super.noSuchMethod(
        Invocation.method(
          #handleDynamicLink,
          [callback],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<void> recordError(
    String? message,
    StackTrace? stackTrace, {
    dynamic reason,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #recordError,
          [
            message,
            stackTrace,
          ],
          {#reason: reason},
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
